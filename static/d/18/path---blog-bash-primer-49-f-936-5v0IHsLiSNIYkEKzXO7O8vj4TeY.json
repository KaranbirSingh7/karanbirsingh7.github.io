{"data":{"markdownRemark":{"html":"<p>I feel like writing Bash is like building something with hot glue.\nWhen you try it for the first time, you'll probably make a big mess and burn yourself.\nAs you use it a bit more, you can slap things together really quickly but the end result won't be very sturdy or pretty.</p>\n<p>The goal of this guide is to serve as a quick primer to writing scripts in Bash, as well as sharing a handful of style tips and pitfalls.\nHowever, the biggest piece of advice I can give about Bash is to write as little of it as possible.\nThe syntax is often unintuitive and scripts written in Bash tend to be fairly brittle.\nHere's my favorite line from Google's <a href=\"https://google.github.io/styleguide/shell.xml\">shell style guide</a>:</p>\n<blockquote>\n<p>Shell should only be used for small utilities or simple wrapper scripts.</p>\n</blockquote>\n<p>I hope this guide helps you write readable, robust, and short Bash scripts.\nIf you find yourself writing longer scripts or needing the more advanced features of Bash, please consider reaching for a stronger scripting language like Ruby or Python.\nYour team mates and future self will thank you.</p>\n<h2 id=\"table-of-contentsa-nametable-of-contentsa\"><a href=\"#table-of-contentsa-nametable-of-contentsa\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents<a name=\"table-of-contents\"></a></h2>\n<ul>\n<li>Hello world</li>\n<li>The basics</li>\n<li>Inputs, outputs, and redirection</li>\n<li>Script arguments</li>\n<li>Files and directories</li>\n<li>Processes</li>\n<li>HTTP utilities</li>\n<li>Text processing</li>\n<li>Patterns I like</li>\n<li>Pitfalls</li>\n<li>Further reading</li>\n</ul>\n<!--\n- [Hello world](#hello-world)\n- [The basics](#the-basics)\n- [Inputs, outputs, and redirection](#inputs-outputs-and-redirection)\n- [Script arguments](#arguments)\n- [Files and directories](#files-and-directories)\n- [Processes](#processes)\n- [HTTP utilities](#http-utilities)\n- [Text processing](#text-processing)\n- [Patterns I like](#patterns-i-like)\n- [Pitfalls](#pitfalls)\n- [Further reading](#further-reading)\n-->\n<h2 id=\"hello-worlda-namehello-worlda\"><a href=\"#hello-worlda-namehello-worlda\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello world<a name=\"hello-world\"></a></h2>\n<ol>\n<li>Create a file called <code>hello-world</code> with the following contents</li>\n</ol>\n<pre><code>#!/bin/bash\n\necho \"Hello, World!\"\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> All bash scripts should start with a bash header. <code>#!/bin/bash</code> is the most common, although <code>#!/usr/bin/env bash</code> is also used.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Make it executable</li>\n</ol>\n<pre><code>chmod +x ./hello-world\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> Notice that the script does not have the <code>.sh</code> extension.\nOmitting the extension makes it easier to replace the script with a script or\nexecutable written in another language later on.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Run it</li>\n</ol>\n<pre><code>./hello-world\n</code></pre>\n<p>You should see <code>Hello, World!</code> printed in your terminal.</p>\n<h2 id=\"the-basicsa-namethe-basicsa\"><a href=\"#the-basicsa-namethe-basicsa\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The basics<a name=\"the-basics\"></a></h2>\n<p>Printing to the terminal:</p>\n<pre><code># write to stdout\necho \"Hello, world!\"\n\n# write to stderr\necho \"Something went wrong...\" >&#x26;2\n</code></pre>\n<p>Declaring variables:</p>\n<pre><code># integers\ncount=10\n\n# strings\nmessage=\"Installing dependencies...\"\n\n# BAD: bash does not support floats\nbad_var=1.1\n</code></pre>\n<blockquote>\n<p><strong>Style Tip:</strong> local variable names should use lowercase letters and underscores</p>\n</blockquote>\n<p>Accessing variables:</p>\n<pre><code>welcome_message=\"Hello!\"\n\necho \"Welcome message: ${welcome_message}\" # prints 'Welcome message: Hello!'\n</code></pre>\n<blockquote>\n<p><strong>Style Tip:</strong> I prefer using the <code>${}</code> syntax for accessing variables as it allows for parameter substitution and avoids string interpolation edge cases.</p>\n</blockquote>\n<p>Integer Arithmetic:</p>\n<pre><code>echo \"$((2+2))\" # prints 4\na=1\n(( a++ )) # sets `a` to 2\necho \"$(( a++ ))\" # still prints 2, then sets value to 3.\n                  # Be careful with pre vs post increment!\n</code></pre>\n<p>Create arrays of values:</p>\n<pre><code># Note that values are space delimited instead of commas unlike most languages\nvalues=( 1 2 3 4 ) # initialize array of integers\nstrings=( \"foo\" \"bar\" \"asdf\" ) # or strings\n\necho \"${values[0]}\" # prints first value in array, \"1\"\necho \"${#values[@]} # prints length of array, \"4\"\n</code></pre>\n<p>If statements:</p>\n<pre><code>if [[ &#x3C;some_condition> ]]; then\n  command0\nelif [[ &#x3C;another_condition> ]]; then\n  command1\nelse\n  command2\nfi\n</code></pre>\n<p>Test operators:</p>\n<pre><code># integers\nif [[ \"$a\" -eq \"$b\" ]] # equal\nif [[ \"$a\" -ne \"$b\" ]] # not equal\nif [[ \"$a\" -gt \"$b\" ]] # greater than\nif [[ \"$a\" -lt \"$b\" ]] # less than\n\n# strings\nif [[ \"$a\" == \"$b\" ]]\nif [[ \"$a\" != \"$b\" ]]\n\n# variables\nif [[ -z \"$1\" ]] # succeeds if $1 is unset\nif [[ -n \"$1\" ]] # succeeds if $1 is set\n\n# boolean operators\nif [[ ! &#x3C;condition> ]] # invert result\nif [[ &#x3C;condition0> ]] &#x26;&#x26; [[ &#x3C;condition1> ]] # and\nif [[ &#x3C;condition0> ]] || [[ &#x3C;condition1> ]] # or\n\n## file operators\nif [[ -e \"${file}\" ]] # true if file or directory exists\nif [[ -f \"${file}\" ]] # true if file exists, false for directories\nif [[ -d \"${dir}\" ]] # true if directory exists, false for files\n</code></pre>\n<p>For loops:</p>\n<pre><code># print 1 through 10 inclusive\nfor i in $(seq 1 10); do # be sure not to quote \"$(...)\"\n  echo \"${i}\"\ndone\n\n# iterate over values in array\nfor i in \"${values[@]}\"; do\n  echo \"${i}\"\ndone\n</code></pre>\n<p>Iterate over lines in a file:</p>\n<pre><code>while read line; do\n  echo \"${line}\"\ndone &#x3C; input.txt\n</code></pre>\n<p>Case statements:</p>\n<pre><code>case \"$1\" in\n\n  start)\n    echo \"Starting...\"\n    ;;\n\n  stop | shutdown)\n    echo \"Stopping...\"\n    ;;\n\n  *)\n    # default case\n    echo \"ERROR: Unrecognized option $1\"\n    echo \"Usage: my_script {start|stop|shutdown}\"\n    ;;\nesac\n</code></pre>\n<p>Create functions:</p>\n<pre><code>pretty_print() { # 'function' keyword is optional, omitting it is more portable\n  echo \"****** $1 ******\"\n}\n\nresult=\"$(pretty_print \"hello world!\")\"\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> there is no <code>return</code> keyword, only writing to stdout/err</p>\n</blockquote>\n<h2 id=\"inputs-outputs-and-redirectiona-nameinputs-outputs-and-redirectiona\"><a href=\"#inputs-outputs-and-redirectiona-nameinputs-outputs-and-redirectiona\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs, outputs, and redirection<a name=\"inputs-outputs-and-redirection\"></a></h2>\n<p>Redirecting program output to stdout and stderr:</p>\n<pre><code># write stdout to file (overrides exists content)\nhappy_command > stdout.log\n\n# write stderr to file\nsad_command 2> stderr.log\n\n# write both stdout and stderr to file\nmixed_command &#x26;> combined.log\n\n# add additional `>` to redirections to append rather than override\nhappy_again >> stdout.log\n</code></pre>\n<p>Piping the output of one command as input to another:</p>\n<pre><code># prints line containing the word \"ERROR\"\ncat debug.log | grep \"ERROR\"\n\n# pretty print JSON response from API\ncurl -H \"Content-Type: application/json\" http://my-api/users | jq '.'\n\n# Sort directories by size\ndu -h | sort -rh\n</code></pre>\n<p>Assign output of command to variable:</p>\n<pre><code># simple\noutput=\"$(echo 'hello!')\"\n\n# more complex\nfirst_user_id=\"$(curl -H \"Content-Type: application/json\" http://my-api/users | jq -r '.users[0].id')\"\n</code></pre>\n<h2 id=\"script-argumentsa-nameargumentsa\"><a href=\"#script-argumentsa-nameargumentsa\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Script arguments<a name=\"arguments\"></a></h2>\n<p>Positional Arguments:</p>\n<pre><code># Usage\n./my-script hello world\n\necho \"$0\" # ./test, script path\necho \"$1\" # hello, first positional arg\necho \"$2\" # world, second arg\n\necho \"$#\" # 2, total number of args\necho \"$*\" # \"hello world\", expands all args as a single word\necho \"$@\" # \"hello\" \"world\", expands all args as separate words\n\n# shift\necho \"$1\" # hello\nshift # discard first arg, slide remaining args to left\necho \"$1\" # world\n\n# print each arg\nfor arg in \"$@\"; do\n  echo \"$arg\"\ndone\n</code></pre>\n<p>Environment variables + Parameter substitution:</p>\n<pre><code># Usage\nMY_VAR=\"some-value\" ANOTHER_VAR=1 ./my-script\n\n# declare a required environment variable\n: ${REQUIRED_VAR:?} # will throw an error if variable is not set\n\n# declare an optional environment variable\n: ${OPTIONAL_VAR:=} # sets OPTIONAL_VAR to empty string if unset\n\n# declare an optional environment variable with a default value\n: ${OPTIONAL_VAR:=default_value} # sets OPTIONAL_VAR to `default_value` if unset\n\n# make variable available to child processes\nexport MY_VAR\n./my-child-script\n\n# assign default value to positional arg\narg=\"${1:-default_value}\" # sets `arg` to first positional arg if set, `default_value` otherwise\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> The leading <code>:</code> prevents bash from running the variable contents as a command</p>\n</blockquote>\n<blockquote>\n<p><strong>Style Tip:</strong> I find it helpful to use ALL CAPS to indicate variable that are passed in from the environment.</p>\n</blockquote>\n<p>Command line flags:</p>\n<pre><code># invoke script with ./my_script -p foo -c bar\nwhile getopts \"c:p:\" opt; do\n  case \"${opt}\" in\n    c)\n      c_value=\"$OPTARG\"\n      ;;\n    p)\n      p_value=\"$OPTARG\"\n      ;;\n    *)\n      echo \"Unknown argument: ${opt}\"\n      ;;\n  esac\ndone\n</code></pre>\n<h2 id=\"files-and-directoriesa-namefiles-and-directoriesa\"><a href=\"#files-and-directoriesa-namefiles-and-directoriesa\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Files and directories<a name=\"files-and-directories\"></a></h2>\n<p>View and edit files:</p>\n<pre><code># view, but not change a file\nless output.log\n\n# a powerful file editor with a bit of a learning curve...\nvim my-script\n</code></pre>\n<p>Filepath operations:</p>\n<pre><code>basename \"/path/to/file.txt\" # prints \"file.txt\"\ndirname \"/path/to/file.txt\" # prints \"/path/to/\"\n</code></pre>\n<p>Create temporary files:</p>\n<pre><code># Create a directory in /tmp\n# 'XXXXX' will be replaced with random characters\ntmpdir=\"$(mktemp -d /tmp/my-project.XXXXX)\"\n\ntrap '{ rm -rf ${tmpdir}; }' EXIT # remove tmpdir on script exit\n</code></pre>\n<p>Changing directories (the nice way):</p>\n<pre><code># GOOD\npushd \"${workspace}\" # changes working dir to ${workspace}\n  # do some work\npopd # changes working dir back to original value\n\n# BAD, forgetting to reset user's working dir...\ncd \"${workspace}\"\n# do some work\nexit 0\n</code></pre>\n<p>Extract file or directory names:</p>\n<pre><code>file_path=/home/foo/my-file.txt\n\nfile=\"$(basename ${file_path})\" # \"my-file.txt\"\ndir=\"$(dirname ${file_path})\" # \"/home/foo\"\n</code></pre>\n<p>Find and delete files by name:</p>\n<pre><code># recursively finds all files and directories named 'test' under /some/dir\nfind /some/dir -name \"test\"\n\n# recursively find all txt files under current directory\nfind . -name \"*.txt\" -type f\n\n# delete all .tmp files\nfind . -name \"*.tmp\" -type f -delete\n# or\nfind . -name \"*.tmp\" -type f | xargs rm\n</code></pre>\n<p>Archive and Extract files:</p>\n<pre><code># Create archive of all files in current directory in\n# tar format, compressed with gzip\ntar czvf my_files.tgz ./*\n\n# Extract to given directory\ntar xvf my_files.tgz -C /some/output/dir\n</code></pre>\n<p>Sourcing utility functions from other files:</p>\n<pre><code># ./utils.sh\npretty_print() {\n  # do work\n}\n\n# ./my_script\nsource ./utils.sh\n\npretty_print \"hello world!\"\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> The <code>.sh</code> extension is useful for indicating files that should be sourced</p>\n</blockquote>\n<h2 id=\"processesa-nameprocessesa\"><a href=\"#processesa-nameprocessesa\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Processes<a name=\"processes\"></a></h2>\n<p>Get the previous command's exit code:</p>\n<pre><code>set -e # Exit if any command exits non-zero\n\n# do some setup\n\nset +e # temporarily allow commands to exit non-zero\nfailing_command\nexit_code=\"$?\" # returns exit code of the previous command\nset -e\n\nif [[ \"${exit_code}\" -eq 0 ]]; then\n  echo \"Failed to do something. Exiting...\" >&#x26;2\n  # do some cleanup\n  exit 1\nfi\n</code></pre>\n<p>Make a command non-interactive:</p>\n<pre><code>yes | rm ./*.txt # equivalent to `rm -f *.txt`\n</code></pre>\n<p>Determine OS:</p>\n<pre><code>platform=\"$( uname -s )\"\ncase \"${platform}\" in\n  Linux)\n    echo \"Linux\"\n    ;;\n  Darwin)\n    echo \"Mac\"\n    ;;\n  *)\n    echo \"Something else\"\n    ;;\nesac\n</code></pre>\n<p>Run commands in sequence:</p>\n<pre><code># stops if command exits non-zero\nmkdir tmp &#x26;&#x26; do-work &#x26;&#x26; rm -r tmp\n\n# stops if command exits zero\nupdate-file || create-file\n\n# run all commands regardless of exit value\ndo-work ; cat output.log\n</code></pre>\n<p>Capture PID and write to file:</p>\n<pre><code>pidfile=/path/to/process.pid\n\n# replace current process with another process, writing process ID to a file\necho $$ > ${pidfile}\nexec some_process\n\n# launch process in the background, writing background process ID to a file\nsome_process &#x26;\necho $! > ${pidfile}\n</code></pre>\n<p>Generate timestamps (useful for logging):</p>\n<pre><code>date +%Y-%m-%d # prints \"2016-01-10\"\n\ndate +%F # same result, shorthand for \"+%Y-%m-%d\"\n\ndate +%s # prints \"1452484369\", seconds since Epoch\n         # useful for generating \"unique\" filenames\n</code></pre>\n<h2 id=\"http-utilitiesa-namehttp-utilitiesa\"><a href=\"#http-utilitiesa-namehttp-utilitiesa\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP utilities<a name=\"http-utilities\"></a></h2>\n<p>Download a file:</p>\n<pre><code># saves escape_artist.png in working dir\nwget https://imgs.xkcd.com/comics/escape_artist.png\n\n# saves file at given path\nwget http://imgs.xkcd.com/comics/escape_artist.png -O /tmp/xkcd.png\n\n# save as remote filename rather than name in URL\nwget --content-disposition https://bosh.io/d/stemcells/bosh-aws-xen-hvm-ubuntu-trusty-go_agent?v=3177\n</code></pre>\n<p>Send HTTP requests:</p>\n<pre><code># GET request with verbose output and follows redirects\ncurl -vL google.com\n\n# post JSON data\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"key\": \"value\"}' localhost:8080\n</code></pre>\n<h2 id=\"text-processinga-nametext-processinga\"><a href=\"#text-processinga-nametext-processinga\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Text processing<a name=\"text-processing\"></a></h2>\n<p>Print a multi-line string using a heredoc:</p>\n<pre><code>cat &#x3C;&#x3C;EOF\nUsage:\n  ./my-script hello world\nEOF\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> <code>EOF</code> can be any unique delimiter.</p>\n</blockquote>\n<p>Save heredoc to variable:</p>\n<pre><code>result=\"$(cat &#x3C;&#x3C;EOF\nsome\nmulti-line\ntext\nEOF)\"\n</code></pre>\n<p>Write a heredoc to a file:</p>\n<pre><code>cat > some-file.txt &#x3C;&#x3C;EOF\nyour\n  file\n    contents\n      here\nEOF\n</code></pre>\n<p>Print the n-th item in a line:</p>\n<pre><code>words=\"this is only a test\"\necho \"${words}\" | cut -d ' ' -f3 # prints \"only\", index starts at 1\necho \"${words}\" | cut -d ' ' -f1-3 # prints \"this is only\"\necho \"${words}\" | cut -d ' ' -f1,f5 # prints \"this test\"\n\ncsv=\"first,last,address\"\necho \"${csv}\" | cut -d ',' -f2 # prints \"last\", changes delimiter\n</code></pre>\n<p>Replace characters in string:</p>\n<pre><code>csv=\"first,last,address\"\n\n# bash built-in, `//` replaces all occurrences, a single `/` replaces the first\necho \"${csv//,/_}\" # outputs \"first_last_address\"\n\n# sed, supports file operations as well\necho \"${csv}\" | sed 's/,/_/g' # prints \"first_last_address\"\n</code></pre>\n<p>Remove lines matching a pattern:</p>\n<pre><code>sed '/DEBUG/d` debug.log # prints file with lines containing DEBUG removed\nsed -i '/^\\s*$/d' output.txt # remove empty lines from file, overriding in-place\n</code></pre>\n<p>Get leading or trailing lines in file:</p>\n<pre><code>head -n1 ./some_file # prints first line in file\ntail -n1 ./some_file # prints last line in file\ntail -f ./process.log # streams file contents as new lines are added, useful for debugging\n</code></pre>\n<p>Counting things:</p>\n<pre><code>wc -w ./some-file # prints word count\nwc -l ./some-file # line count\nwc -m ./some-file # char count\n\necho \"${output}\" | wc -w # also accepts stdin\n</code></pre>\n<p>Searching for text:</p>\n<pre><code># print lines matching pattern\ngrep 'foo' ./some-file\ngrep -i 'fOo' ./some-file # case insensitive\ngrep -v 'bar' ./some-file # inverse, print lines not matching regex\ngrep 'fo\\+' ./some-file # regex, use egrep for better regex support\necho \"${var}\" | grep 'foo' # can be used with pipes\n\n# check for running process name\nps aux | grep mysql\n</code></pre>\n<p>Using regex in conditionals:</p>\n<pre><code>regex='[[:digit:]]{1,3}\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3}'\nif [[ \"10.10.0.255\" =~ ${regex} ]]; then # do not surround regex variable in quotes\n  echo \"Match!\"\nelse\n  echo \"No match...\"\nfi\n\n# capture groups\nregex='[a-z]+_([a-z]+)' # capture letters following `_`\n[[ \"first_last\" =~ ${regex} ]]\nlast_name=\"${BASH_REMATCH[1]}\" # [0] is the full match, [1] is the first capture group\n</code></pre>\n<blockquote>\n<p><strong>Notes:</strong></p>\n</blockquote>\n<ul>\n<li>Uses POSIX regex, e.g. <code>[[:digit:]]</code> instead of <code>\\d</code></li>\n<li>To avoid unexpected behavior, always store regex in a variable and\ndo not quote the variable after the <code>=~</code> operator.</li>\n</ul>\n<h2 id=\"patterns-i-likea-namepatterns-i-likea\"><a href=\"#patterns-i-likea-namepatterns-i-likea\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Patterns I like<a name=\"patterns-i-like\"></a></h2>\n<p>Setting reasonable default options:</p>\n<pre><code># exit immediately if a command exits non-zero\nset -e\n\n# treat unset variables as errors\nset -u\n\n# prints commands as they are executed\n# Nice for logging in prod/CI environments, but probably omit if your script is\n# intended to be run by humans\nset -x\n\n# sets return value of pipeline to non-zero if any command returns non-zero\nset -o pipefail\n\n# one-liner\nset -eux -o pipefail\n</code></pre>\n<p>Allow your script to be called from any working directory:</p>\n<pre><code># get the absolute location of this script\nmy_dir=\"$( cd \"$( dirname \"$0\" )\" &#x26;&#x26; pwd )\"\n\n# assumes my_dir is one level below project_dir\nproject_dir=\"$( cd \"${my_dir}/..\" &#x26;&#x26; pwd )\"\n\npushd \"${project_dir}\"\n  cat ./data/config.yml\n  ./scripts/other_script\npopd\n</code></pre>\n<p>Boilerplate file template:</p>\n<pre><code>#!/bin/bash\n\nset -eux -o pipefail\n\nmy_dir=\"$( cd \"$( dirname \"$0\" )\" &#x26;&#x26; pwd )\"\nproject_dir=\"$( cd \"${my_dir}/..\" &#x26;&#x26; pwd )\"\n\n: ${REQUIRED_VAR:?}\n: ${OPTIONAL_VAR:=}\n: ${DEFAULT_VAR:=default-value}\n\n# YOUR CODE HERE\n</code></pre>\n<h2 id=\"pitfallsa-namepitfallsa\"><a href=\"#pitfallsa-namepitfallsa\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pitfalls<a name=\"pitfalls\"></a></h2>\n<p>Forgetting to make script executable:</p>\n<pre><code># BAD\necho \"${script_contents}\" > ./my-script\n./my-script # prints \"bash: ./my-script: Permission denied\"\n\n# GOOD\nchmod +x ./my-script\n./my-script # runs as expected\n</code></pre>\n<p>Misusing lexical comparison operators (<code>></code> and <code>&#x3C;</code>) for integer comparisons:</p>\n<pre><code># BAD\n[[ 5 > 10 ]] # evaluates to true since 5 is alphabetically greater than 1\n\n# GOOD\n[[ 5 -gt 10 ]] # evaluates to false as expected\n</code></pre>\n<p>Adding whitespace around variable assignment and conditionals:</p>\n<pre><code># BAD\nval = \"some value\" # attempts to run val as a command, prints \"No command 'val' found\"\n\n# GOOD\nval=\"some value\" # performs variable assignment as expected\n\n# BAD\n[[1 -eq 1]] # syntax error, \"[[1: command not found\"\n\n# GOOD\n[[ 1 -eq 1 ]] # performs comparison as expected\n</code></pre>\n<p>Using pipes without <code>set -o pipefail</code>:</p>\n<pre><code># BAD\nset -e # only considers the exit code of the last command run in a pipeline\n\ncurl http://example.comm | tee output.txt # curl exits non-zero, but tee exits 0\necho \"continuing...\"                      # bash continues to run the rest of the script\n\n# GOOD\nset -e -o pipefail # sets pipeline exit-code to non-zero if any command exits non-zero\n\ncurl http://example.comm | tee output.txt # curl fails, script exits as expected\necho \"continuing...\" # not executed\n</code></pre>\n<p>Leaving variables unquoted:</p>\n<pre><code># use quotes to prevent word splitting\ntmp_dir=\"/home/my stuff/tmp\" # note the space in filepath\n\n# BAD\nrm -rf ${my_dir} # lack of quotes causes to args to be pass '/home/my' and 'stuff/tmp'\n\n# GOOD\nrm -rf \"${my_dir}\" # quotes ensure variable is passed as a single arg\n\n# use quotes to handle empty vars\nENV_VAR=\"\"\n\n# BAD\n[[ -z ${ENV_VAR} ]] # expands to [[ -z ]], returns syntax error\n\n# GOOD\n[[ -z \"${ENV_VAR}\" ]] # expands to [[ -z \"\" ]], no syntax error\n</code></pre>\n<p>Passing a potentially empty variable to <code>rm -rf</code>:</p>\n<pre><code># caller forgets to set OUTPUT_DIR\n\n# BAD\nrm -rf \"${OUTPUT_DIR}/*\" # expands to 'rm -rf /*', yikes\n\n# GOOD\n: ${OUTPUT_DIR:?} # script exits if OUTPUT_DIR is unset\nrm -rf \"${OUTPUT_DIR}/*\"\n</code></pre>\n<blockquote>\n<p><strong>Note:</strong> <a href=\"http://www.pcworld.com/article/2871653/scary-steam-for-linux-bug-erases-all-the-personal-files-on-your-pc.html\">Here</a> is an example of this pitfall in action.</p>\n</blockquote>\n<p>Using <code>~</code> in scripts:</p>\n<pre><code># BAD\nhome_dir=\"~\" # ~ does not expand when quoted\n\n# GOOD\nhome_dir=\"${HOME}\" # expands as expected\n</code></pre>\n<h2 id=\"further-readinga-namefurther-readinga\"><a href=\"#further-readinga-namefurther-readinga\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further Reading<a name=\"further-reading\"></a></h2>\n<ul>\n<li><a href=\"http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html\">http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html</a></li>\n<li><a href=\"http://tldp.org/LDP/abs/html/\">http://tldp.org/LDP/abs/html/</a></li>\n<li><a href=\"http://mywiki.wooledge.org/BashPitfalls\">http://mywiki.wooledge.org/BashPitfalls</a></li>\n<li><a href=\"https://google.github.io/styleguide/shell.xml\">https://google.github.io/styleguide/shell.xml</a></li>\n</ul>","frontmatter":{"date":"March 05, 2016","path":"/blog/bash-primer","title":"Bash Primer"}}},"pageContext":{}}